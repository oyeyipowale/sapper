[{"html":"<p>Until we reach version 1.0, there may be occasional changes to the project structure Sapper expects.</p>\n\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id=\"0_27_to_0_28\" class=\"offset-anchor\" ></span>\n\t\t\t\t\t\t<a href=\"migrating#0_27_to_0_28\" class=\"anchor\" aria-hidden=\"true\"></a>\n\t\t\t\t\t\t0.27 to 0.28\n\t\t\t\t\t</h3><ul>\n<li>Rollup 0.x.x is no longer supported. (<a href=\"https://github.com/sveltejs/sapper/pull/1326\" target=\"_blank\" rel=\"noopener noreferrer\">#1326</a>). Any version greater than 1.x is supported, but the latest (currently 2.x) is strongly recommended.</li>\n<li>Versions of Svelte before 3.17.3 are no longer supported. (<a href=\"https://github.com/sveltejs/sapper/pull/1067\" target=\"_blank\" rel=\"noopener noreferrer\">#1067</a>)</li>\n<li><code>&lt;script&gt;</code> tags will now be loaded with the <code>defer</code> attribute (<a href=\"https://github.com/sveltejs/sapper/pull/1123\" target=\"_blank\" rel=\"noopener noreferrer\">#1123</a>), which means:<ul>\n<li>IE9 support was dropped since IE9 may interleave deferred script execution.</li>\n<li><code>%sapper.scripts%</code> can be moved to the <code>&lt;head&gt;</code> section for slightly better performance</li>\n</ul>\n</li>\n<li>You must set <code>hydratable: true</code> in your server build as well in order to properly hydrate <code>&lt;head&gt;</code> elements (<a href=\"https://github.com/sveltejs/sapper/pull/1067\" target=\"_blank\" rel=\"noopener noreferrer\">#1067</a>)</li>\n<li>The files in the generated <code>service-worker.js</code> file are now prefixed with a <code>/</code> (<a href=\"https://github.com/sveltejs/sapper/pull/1244\" target=\"_blank\" rel=\"noopener noreferrer\">#1244</a>). If you are using the <code>service-worker.js</code> from the default template, no changes will be necessary. If you have modified your service worker, please check to ensure compatibility.</li>\n<li>The <code>sapper-noscroll</code> attribute was renamed to <code>sapper:noscroll</code> (<a href=\"https://github.com/sveltejs/sapper/pull/1320\" target=\"_blank\" rel=\"noopener noreferrer\">#1320</a>)</li>\n<li>Rollup users should update the <code>onwarn</code> filter in <code>rollup.config.js</code> to match <a href=\"https://github.com/sveltejs/sapper-template/pull/246/files\" target=\"_blank\" rel=\"noopener noreferrer\">the change made in <code>sapper-template</code></a>. </li>\n</ul>\n\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id=\"0_25_to_0_26\" class=\"offset-anchor\" ></span>\n\t\t\t\t\t\t<a href=\"migrating#0_25_to_0_26\" class=\"anchor\" aria-hidden=\"true\"></a>\n\t\t\t\t\t\t0.25 to 0.26\n\t\t\t\t\t</h3><p>The most significant change yet: Sapper is now built on Svelte 3.</p>\n\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id=\"Importing_Sapper\" class=\"offset-anchor\" ></span>\n\t\t\t\t\t\t<a href=\"migrating#Importing_Sapper\" class=\"anchor\" aria-hidden=\"true\"></a>\n\t\t\t\t\t\tImporting Sapper\n\t\t\t\t\t</h4><p>Your app&#39;s runtime is now built to <code>src/node_modules/@sapper</code> â€” this allows you to easily import it from anywhere in your source code. Update your <code>server.js</code>...</p>\n<div class=''><pre class='language-diff'><code>// src/server.js\n<span class=\"hljs-deletion\">-import * as sapper from '../__sapper__/server.js';</span>\n<span class=\"hljs-addition\">+import * as sapper from '@sapper/server';</span></code></pre></div><p>...and client.js:</p>\n<div class=''><pre class='language-diff'><code><span class=\"hljs-deletion\">-import * as sapper from '../__sapper__/client.js';</span>\n<span class=\"hljs-addition\">+import * as sapper from '@sapper/app';</span>\n\nsapper.start({\n\ttarget: document.querySelector('#sapper')\n});</code></pre></div><p>The same applies to imports like <code>goto</code> and <code>prefetchRoutes</code>.</p>\n\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id=\"Webpack_config\" class=\"offset-anchor\" ></span>\n\t\t\t\t\t\t<a href=\"migrating#Webpack_config\" class=\"anchor\" aria-hidden=\"true\"></a>\n\t\t\t\t\t\tWebpack config\n\t\t\t\t\t</h4><p>If you&#39;re using webpack, you must update your configuration to recognise <code>.mjs</code> and <code>.svelte</code> files:</p>\n<div class=''><pre class='language-javascript'><code>resolve: {\n\t<span class=\"hljs-attr\">extensions</span>: [<span class=\"hljs-string\">'.mjs'</span>, <span class=\"hljs-string\">'.js'</span>, <span class=\"hljs-string\">'.json'</span>, <span class=\"hljs-string\">'.svelte'</span>, <span class=\"hljs-string\">'.html'</span>]\n}</code></pre></div><p>If you&#39;re using .svelte files (recommended), you&#39;ll also need to tell <code>svelte-loader</code> to expect them:</p>\n<div class=''><pre class='language-diff'><code><span class=\"hljs-deletion\">-test: /\\.html$/</span>\n<span class=\"hljs-addition\">+test: /\\.(svelte|html)$/</span></code></pre></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id=\"Session_data\" class=\"offset-anchor\" ></span>\n\t\t\t\t\t\t<a href=\"migrating#Session_data\" class=\"anchor\" aria-hidden=\"true\"></a>\n\t\t\t\t\t\tSession data\n\t\t\t\t\t</h4><p>Passing data from server to client is now accomplished with a <code>session</code> function passed to the middleware:</p>\n<div class=''><pre class='language-javascript'><code><span class=\"hljs-comment\">// src/server.js</span>\nsapper.middleware({\n\t<span class=\"hljs-attr\">session</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =&gt;</span> ({\n\t\t<span class=\"hljs-comment\">// session data goes here</span>\n\t})\n})</code></pre></div><p>This data is available in <code>preload</code> functions as the second argument:</p>\n<div class=''><pre class='language-markup'><code><span class=\"hljs-comment\">&lt;!-- SomeComponent.svelte --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">context</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\">\n\t<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">preload</span>(<span class=\"hljs-params\">page, session</span>) </span>{\n\t\t<span class=\"hljs-keyword\">const</span> { path, params, query } = page; <span class=\"hljs-comment\">// as before</span>\n\n\t\t<span class=\"hljs-keyword\">if</span> (!session.user) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.redirect(<span class=\"hljs-number\">302</span>, <span class=\"hljs-string\">'login'</span>);\n\t\t<span class=\"hljs-comment\">// ...</span>\n\t}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id=\"Stores\" class=\"offset-anchor\" ></span>\n\t\t\t\t\t\t<a href=\"migrating#Stores\" class=\"anchor\" aria-hidden=\"true\"></a>\n\t\t\t\t\t\tStores\n\t\t\t\t\t</h4><p>It is also available, along with <code>page</code> and <code>preloading</code>, as a store inside components:</p>\n<div class=''><pre class='language-markup'><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n\t<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> sapper <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@sapper/app'</span>;\n\t<span class=\"hljs-keyword\">const</span> { page, preloading, session } = sapper.stores();\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre></div><p><code>page</code> and <code>preloading</code> are <a href=\"https://svelte.dev/tutorial/readable-stores\" target=\"_blank\" rel=\"noopener noreferrer\">readable stores</a>, while <code>session</code> is <a href=\"https://svelte.dev/tutorial/writable-stores\" target=\"_blank\" rel=\"noopener noreferrer\">writable</a>. Writing to the session store (for example, after the user logs in) will cause any <code>preload</code> functions that rely on session data to re-run; it will not persist anything to the server.</p>\n\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id=\"Layouts\" class=\"offset-anchor\" ></span>\n\t\t\t\t\t\t<a href=\"migrating#Layouts\" class=\"anchor\" aria-hidden=\"true\"></a>\n\t\t\t\t\t\tLayouts\n\t\t\t\t\t</h4><p>Your layout components should now use a <code>&lt;slot&gt;</code> element to render nested routes, instead of <code>&lt;svelte:component&gt;</code>:</p>\n<div class=''><pre class='language-diff'><code>&lt;main&gt;\n<span class=\"hljs-deletion\">-    &lt;svelte:component this={child.component} {...child.props}/&gt;</span>\n<span class=\"hljs-addition\">+    &lt;slot&gt;&lt;/slot&gt;</span>\n&lt;/main&gt;</code></pre></div><p>The layout component itself receives a <code>segment</code> prop, which is equivalent to <code>child.segment</code> in earlier versions.</p>\n\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id=\"0_21_to_0_22\" class=\"offset-anchor\" ></span>\n\t\t\t\t\t\t<a href=\"migrating#0_21_to_0_22\" class=\"anchor\" aria-hidden=\"true\"></a>\n\t\t\t\t\t\t0.21 to 0.22\n\t\t\t\t\t</h3><p>Instead of importing middleware from the <code>sapper</code> package, or importing the client runtime from <code>sapper/runtime.js</code>, the app is <em>compiled into</em> the generated files:</p>\n<div class=''><pre class='language-diff'><code>// src/client.js\n<span class=\"hljs-deletion\">-import { init } from 'sapper/runtime.js';</span>\n<span class=\"hljs-deletion\">-import { manifest } from './manifest/client.js';</span>\n<span class=\"hljs-addition\">+import * as sapper from '../__sapper__/client.js';</span>\n\n<span class=\"hljs-deletion\">-init({</span>\n<span class=\"hljs-addition\">+sapper.start({</span>\n\ttarget: document.querySelector('#sapper'),\n<span class=\"hljs-deletion\">-    manifest</span>\n});</code></pre></div><div class=''><pre class='language-diff'><code>// src/server.js\nimport sirv from 'sirv';\nimport polka from 'polka';\nimport compression from 'compression';\n<span class=\"hljs-deletion\">-import sapper from 'sapper';</span>\n<span class=\"hljs-deletion\">-import { manifest } from './manifest/server.js';</span>\n<span class=\"hljs-addition\">+import * as sapper from '../__sapper__/server.js';</span>\n\nconst { PORT, NODE_ENV } = process.env;\nconst dev = NODE_ENV <span class=\"hljs-comment\">=== 'development';</span>\n\npolka() // You can also use Express\n\t.use(\n\t\tcompression({ threshold: 0 }),\n<span class=\"hljs-deletion\">-        sirv('assets', { dev }),</span>\n<span class=\"hljs-addition\">+        sirv('static', { dev }),</span>\n<span class=\"hljs-deletion\">-        sapper({ manifest })</span>\n<span class=\"hljs-addition\">+        sapper.middleware()</span>\n\t)\n\t.listen(PORT, err =&gt; {\n\t\tif (err) console.log('error', err);\n\t});</code></pre></div><div class=''><pre class='language-diff'><code>// src/service-worker.js\n<span class=\"hljs-deletion\">-import { assets, shell, routes, timestamp } from './manifest/service-worker.js';</span>\n<span class=\"hljs-addition\">+import { files, shell, routes, timestamp } from '../__sapper__/service-worker.js';</span></code></pre></div><p>In addition, the default build and export directories are now <code>__sapper__/build</code> and <code>__sapper__/export</code> respectively.</p>\n\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id=\"0_20_to_0_21\" class=\"offset-anchor\" ></span>\n\t\t\t\t\t\t<a href=\"migrating#0_20_to_0_21\" class=\"anchor\" aria-hidden=\"true\"></a>\n\t\t\t\t\t\t0.20 to 0.21\n\t\t\t\t\t</h3><ul>\n<li>The <code>app</code> directory is now <code>src</code></li>\n<li>The <code>routes</code> directory is now <code>src/routes</code></li>\n<li>The <code>assets</code> directory is now <code>static</code> (remember to update your <code>src/server.js</code> file to reflect this change as well)</li>\n<li>Instead of having three separate config files (<code>webpack/client.config.js</code>, <code>webpack/server.config.js</code> and <code>webpack/service-worker.config.js</code>), there is a single <code>webpack.config.js</code> file that exports <code>client</code>, <code>server</code> and <code>serviceworker</code> configs.</li>\n</ul>\n\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id=\"0_17_to_0_18\" class=\"offset-anchor\" ></span>\n\t\t\t\t\t\t<a href=\"migrating#0_17_to_0_18\" class=\"anchor\" aria-hidden=\"true\"></a>\n\t\t\t\t\t\t0.17 to 0.18\n\t\t\t\t\t</h3><p>The <code>sapper/webpack/config.js</code> file (required in the <code>webpack/*.config.js</code> files) is now <code>sapper/config/webpack.js</code>.</p>\n\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id=\"0_14_to_0_15\" class=\"offset-anchor\" ></span>\n\t\t\t\t\t\t<a href=\"migrating#0_14_to_0_15\" class=\"anchor\" aria-hidden=\"true\"></a>\n\t\t\t\t\t\t0.14 to 0.15\n\t\t\t\t\t</h3><p>This release changed how routing is handled, resulting in a number of changes.</p>\n<p>Instead of a single <code>App.html</code> component, you can place <code>_layout.html</code> components in any directory under <code>routes</code>. You should move <code>app/App.html</code> to <code>routes/_layout.html</code> and modify it like so:</p>\n<div class=''><pre class='language-diff'><code><span class=\"hljs-deletion\">-&lt;!-- app/App.html --&gt;</span>\n<span class=\"hljs-addition\">+&lt;!-- routes/_layout.html --&gt;</span>\n\n<span class=\"hljs-deletion\">-&lt;Nav path={props.path}/&gt;</span>\n<span class=\"hljs-addition\">+&lt;Nav segment={child.segment}/&gt;</span>\n\n<span class=\"hljs-deletion\">-&lt;svelte:component this={Page} {...props}/&gt;</span>\n<span class=\"hljs-addition\">+&lt;svelte:component this={child.component} {...child.props}/&gt;</span></code></pre></div><p>You will then need to remove <code>App</code> from your client and server entry points, and replace <code>routes</code> with <code>manifest</code>:</p>\n<div class=''><pre class='language-diff'><code>// app/client.js\nimport { init } from 'sapper/runtime.js';\n<span class=\"hljs-deletion\">-import { routes } from './manifest/client.js';</span>\n<span class=\"hljs-deletion\">-import App from './App.html';</span>\n<span class=\"hljs-addition\">+import { manifest } from './manifest/client.js';</span>\n\ninit({\n\ttarget: document.querySelector('#sapper'),\n<span class=\"hljs-deletion\">-    routes,</span>\n<span class=\"hljs-deletion\">-    App</span>\n<span class=\"hljs-addition\">+    manifest</span>\n});</code></pre></div><div class=''><pre class='language-diff'><code>// app/server.js\nimport sirv from 'sirv';\nimport polka from 'polka';\nimport sapper from 'sapper';\nimport compression from 'compression';\n<span class=\"hljs-deletion\">-import { routes } from './manifest/server.js';</span>\n<span class=\"hljs-deletion\">-import App from './App.html';</span>\n<span class=\"hljs-addition\">+import { manifest } from './manifest/server.js';</span>\n\npolka()\n\t.use(\n\t\tcompression({ threshold: 0 }),\n\t\tsirv('assets'),\n<span class=\"hljs-deletion\">-        sapper({ routes, App })</span>\n<span class=\"hljs-addition\">+        sapper({ manifest })</span>\n\t)\n\t.listen(process.env.PORT)\n\t.catch(err =&gt; {\n\t\tconsole.log('error', err);\n\t});</code></pre></div><p><code>preload</code> functions no longer take the entire request object on the server; instead, they receive the same argument as on the client.</p>\n\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id=\"0_13_to_0_14\" class=\"offset-anchor\" ></span>\n\t\t\t\t\t\t<a href=\"migrating#0_13_to_0_14\" class=\"anchor\" aria-hidden=\"true\"></a>\n\t\t\t\t\t\t0.13 to 0.14\n\t\t\t\t\t</h3><p>The <code>4xx.html</code> and <code>5xx.html</code> error pages have been replaced with a single page, <code>_error.html</code>. In addition to the regular <code>params</code>, <code>query</code> and <code>path</code> props, it receives <code>status</code> and <code>error</code>.</p>\n\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id=\"0_11_to_0_12\" class=\"offset-anchor\" ></span>\n\t\t\t\t\t\t<a href=\"migrating#0_11_to_0_12\" class=\"anchor\" aria-hidden=\"true\"></a>\n\t\t\t\t\t\t0.11 to 0.12\n\t\t\t\t\t</h3><p>In earlier versions, each page was a completely standalone component. Upon navigation, the entire page would be torn down and a new one created. Typically, each page would import a shared <code>&lt;Layout&gt;</code> component to achieve visual consistency.</p>\n<p>As of 0.12, this changes: we have a single <code>&lt;App&gt;</code> component, defined in <code>app/App.html</code>, which controls the rendering of the rest of the app. See <a href=\"https://github.com/sveltejs/sapper-template/blob/master/app/App.html\" target=\"_blank\" rel=\"noopener noreferrer\">sapper-template</a> for an example.</p>\n<p>This component is rendered with the following values:</p>\n<ul>\n<li><code>Page</code> â€” a component constructor for the current page</li>\n<li><code>props</code> â€” an object with <code>params</code>, <code>query</code>, and any data returned from the page&#39;s <code>preload</code> function</li>\n<li><code>preloading</code> â€” <code>true</code> during preload, <code>false</code> otherwise. Useful for showing progress indicators</li>\n</ul>\n<p>Sapper needs to know about your app component. To that end, you will need to modify your <code>app/server.js</code> and <code>app/client.js</code>:</p>\n<div class=''><pre class='language-diff'><code>// app/server.js\nimport polka from 'polka';\nimport sapper from 'sapper';\nimport serve from 'serve-static';\nimport { routes } from './manifest/server.js';\n<span class=\"hljs-addition\">+import App from './App.html';</span>\n\npolka()\n\t.use(\n\t\tserve('assets'),\n<span class=\"hljs-deletion\">-        sapper({ routes })</span>\n<span class=\"hljs-addition\">+        sapper({ App, routes })</span>\n\t)\n\t.listen(process.env.PORT);</code></pre></div><div class=''><pre class='language-diff'><code>// app/client.js\nimport { init } from 'sapper/runtime.js';\nimport { routes } from './manifest/client.js';\n<span class=\"hljs-addition\">+import App from './App.html';</span>\n\n<span class=\"hljs-deletion\">-init(target: document.querySelector('#sapper'), routes);</span>\n<span class=\"hljs-addition\">+init({</span>\n<span class=\"hljs-addition\">+    target: document.querySelector('#sapper'),</span>\n<span class=\"hljs-addition\">+    routes,</span>\n<span class=\"hljs-addition\">+    App</span>\n<span class=\"hljs-addition\">+});</span></code></pre></div><p>Once your <code>App.html</code> has been created and your server and client apps updated, you can remove any <code>&lt;Layout&gt;</code> components from your individual pages.</p>\n\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id=\"0_9_to_0_10\" class=\"offset-anchor\" ></span>\n\t\t\t\t\t\t<a href=\"migrating#0_9_to_0_10\" class=\"anchor\" aria-hidden=\"true\"></a>\n\t\t\t\t\t\t&lt;0.9 to 0.10\n\t\t\t\t\t</h3>\n\t\t\t\t\t<h5>\n\t\t\t\t\t\t<span id=\"false\" class=\"offset-anchor\" data-scrollignore></span>\n\t\t\t\t\t\t<a href=\"migrating#false\" class=\"anchor\" aria-hidden=\"true\"></a>\n\t\t\t\t\t\tapp/template.html\n\t\t\t\t\t</h5><ul>\n<li>Your <code>&lt;head&gt;</code> element must contain <code>%sapper.base%</code> (see (<a href=\"docs#Base_URLs\" rel=\"noopener noreferrer\">base URLs</a>)</li>\n<li>Remove references to your service worker; this is now handled by <code>%sapper.scripts%</code></li>\n</ul>\n\n\t\t\t\t\t<h5>\n\t\t\t\t\t\t<span id=\"false\" class=\"offset-anchor\" data-scrollignore></span>\n\t\t\t\t\t\t<a href=\"migrating#false\" class=\"anchor\" aria-hidden=\"true\"></a>\n\t\t\t\t\t\tPages\n\t\t\t\t\t</h5><ul>\n<li>Your <code>preload</code> functions should now use <code>this.fetch</code> instead of <code>fetch</code>. <code>this.fetch</code> allows you to make credentialled requests on the server, and means that you no longer need to create a <code>global.fetch</code> object in <code>app/server.js</code>.</li>\n</ul>\n\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id=\"0_6_to_0_7\" class=\"offset-anchor\" ></span>\n\t\t\t\t\t\t<a href=\"migrating#0_6_to_0_7\" class=\"anchor\" aria-hidden=\"true\"></a>\n\t\t\t\t\t\t0.6 to 0.7\n\t\t\t\t\t</h3><p>Consult <a href=\"https://github.com/sveltejs/sapper-template\" target=\"_blank\" rel=\"noopener noreferrer\">sapper-template</a> for full examples of all the below points.</p>\n\n\t\t\t\t\t<h5>\n\t\t\t\t\t\t<span id=\"false\" class=\"offset-anchor\" data-scrollignore></span>\n\t\t\t\t\t\t<a href=\"migrating#false\" class=\"anchor\" aria-hidden=\"true\"></a>\n\t\t\t\t\t\tpackage.json\n\t\t\t\t\t</h5><p>To start a dev server, use <code>sapper dev</code> rather than <code>node server.js</code>. In all likelihood, your package.json will have an <code>npm run dev</code> script that will need to be updated.</p>\n\n\t\t\t\t\t<h5>\n\t\t\t\t\t\t<span id=\"false\" class=\"offset-anchor\" data-scrollignore></span>\n\t\t\t\t\t\t<a href=\"migrating#false\" class=\"anchor\" aria-hidden=\"true\"></a>\n\t\t\t\t\t\tEntry points\n\t\t\t\t\t</h5><p>As of version 0.7, Sapper expects to find your entry points â€” for client, server and service worker â€” in an <code>app</code> folder. Instead of using magically-injected <code>__variables__</code>, each entry point imports from its corresponding file in the <code>app/manifests</code> folder. These are automatically generated by Sapper.</p>\n<div class=''><pre class='language-javascript'><code><span class=\"hljs-comment\">// app/client.js (formerly templates/main.js)</span>\n<span class=\"hljs-keyword\">import</span> { init } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'sapper/runtime.js'</span>;\n<span class=\"hljs-keyword\">import</span> { routes } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./manifest/client.js'</span>;\n\ninit(<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#sapper'</span>), routes);\n\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">module</span>.hot) <span class=\"hljs-built_in\">module</span>.hot.accept(); <span class=\"hljs-comment\">// enable hot reloading</span></code></pre></div><div class=''><pre class='language-javascript'><code><span class=\"hljs-comment\">// app/server.js (formerly server.js)</span>\n<span class=\"hljs-comment\">// Note that we're now using ES module syntax, because this</span>\n<span class=\"hljs-comment\">// file is processed by webpack like the rest of your app</span>\n<span class=\"hljs-keyword\">import</span> sapper <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'sapper'</span>;\n<span class=\"hljs-keyword\">import</span> { routes } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./manifest/server.js'</span>;\n<span class=\"hljs-comment\">// ..other imports</span>\n\n<span class=\"hljs-comment\">// we now pass the `routes` object to the Sapper middleware</span>\napp.use(sapper({\n\troutes\n}));</code></pre></div><div class=''><pre class='language-javascript'><code><span class=\"hljs-comment\">// app/service-worker.js (formerly templates/service-worker.js)</span>\n<span class=\"hljs-keyword\">import</span> { assets, shell, timestamp, routes } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./manifest/service-worker.js'</span>;\n\n<span class=\"hljs-comment\">// replace e.g. `__assets__` with `assets` in the rest of the file</span></code></pre></div>\n\t\t\t\t\t<h5>\n\t\t\t\t\t\t<span id=\"false\" class=\"offset-anchor\" data-scrollignore></span>\n\t\t\t\t\t\t<a href=\"migrating#false\" class=\"anchor\" aria-hidden=\"true\"></a>\n\t\t\t\t\t\tTemplates and error pages\n\t\t\t\t\t</h5><p>In previous versions, we had <code>templates/2xx.html</code>, <code>templates/4xx.html</code> and <code>templates/5xx.html</code>. Now, we have a single template, <code>app/template.html</code>, which should look like your old <code>templates/2xx.html</code>.</p>\n<p>For handling error states, we have a &#39;special&#39; route: <code>routes/_error.html</code>.</p>\n<p>This page is just like any other, except that it will get rendered whenever an error states is reached. The component has access to <code>status</code> and <code>error</code> values.</p>\n<p>Note that you can now use <code>this.error(statusCode, error)</code> inside your <code>preload</code> functions.</p>\n\n\t\t\t\t\t<h5>\n\t\t\t\t\t\t<span id=\"false\" class=\"offset-anchor\" data-scrollignore></span>\n\t\t\t\t\t\t<a href=\"migrating#false\" class=\"anchor\" aria-hidden=\"true\"></a>\n\t\t\t\t\t\tWebpack configs\n\t\t\t\t\t</h5><p>Your webpack configs now live in a <code>webpack</code> directory:</p>\n<ul>\n<li><code>webpack.client.config.js</code> is now <code>webpack/client.config.js</code></li>\n<li><code>webpack.server.config.js</code> is now <code>webpack/server.config.js</code></li>\n</ul>\n<p>If you have a service worker, you should also have a <code>webpack/service-worker.config.js</code> file. See <a href=\"https://github.com/sveltejs/sapper-template\" target=\"_blank\" rel=\"noopener noreferrer\">sapper-template</a> for an example.</p>\n","metadata":{"title":"Migrating"},"subsections":[{"slug":"0_27_to_0_28","title":"0.27 to 0.28","level":3},{"slug":"0_25_to_0_26","title":"0.25 to 0.26","level":3},{"slug":"Importing_Sapper","title":"Importing Sapper","level":4},{"slug":"Webpack_config","title":"Webpack config","level":4},{"slug":"Session_data","title":"Session data","level":4},{"slug":"Stores","title":"Stores","level":4},{"slug":"Layouts","title":"Layouts","level":4},{"slug":"0_21_to_0_22","title":"0.21 to 0.22","level":3},{"slug":"0_20_to_0_21","title":"0.20 to 0.21","level":3},{"slug":"0_17_to_0_18","title":"0.17 to 0.18","level":3},{"slug":"0_14_to_0_15","title":"0.14 to 0.15","level":3},{"slug":"0_13_to_0_14","title":"0.13 to 0.14","level":3},{"slug":"0_11_to_0_12","title":"0.11 to 0.12","level":3},{"slug":"0_9_to_0_10","title":"&lt;0.9 to 0.10","level":3},{"slug":"0_6_to_0_7","title":"0.6 to 0.7","level":3}],"slug":"Migrating","file":"01-migrating.md"}]