[{"fragment":"version-numbers","answer":"<p>The version number reflects that there are major features we&#39;d like to add still. E.g. TypeScript support was added in Sapper 0.28.</p>\n<p>Sapper is operationally stable and some of the Svelte maintainers run their businesses on Sapper. &quot;production readiness&quot; is subjective, and if Sapper fulfils your requirements, then it&#39;s production ready. As with any software, a major version number is not an indicator of whether something is suitable for your specific use-case.</p>\n","metadata":{"question":"Sapper is not 1.0 yet. Is it production ready and should I use it?"}},{"fragment":"webpack-vs-rollup","answer":"<p>Sapper offers both Rollup and Webpack templates. If you don&#39;t have a strong reason to prefer one over the other, we&#39;d recommend using the Rollup template. The Rollup implementation supports additional features such as improved tree-shaking for smaller bundles, TypeScript, the ability to <a href=\"../docs#Browser_support\" rel=\"noopener noreferrer\">serve a legacy bundle to older browsers</a>, and it automatically lists all your <code>.js</code> and <code>.css</code> files in the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Link\" target=\"_blank\" rel=\"noopener noreferrer\"><code>Link</code> header</a> to <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/preload\" target=\"_blank\" rel=\"noopener noreferrer\">preload</a> those files.</p>\n","metadata":{"question":"Should I use Webpack or Rollup with Sapper?"}},{"fragment":"typescript","answer":"<p>The Sapper template project with Rollup (see <a href=\"/docs#Getting_started\" rel=\"noopener noreferrer\">Getting started</a>) can be converted to TypeScript by running:</p>\n<pre class='language-bash'><code>node scripts/setupTypeScript.js</code></pre><p>You can also find a number of <a href=\"https://github.com/sveltejs/integrations#sapper-templates-boilerplates\" target=\"_blank\" rel=\"noopener noreferrer\">community templates</a> that utilize TypeScript.</p>\n","metadata":{"question":"How do I use TypeScript with Sapper?"}},{"fragment":"why-is-there-a-node_modules-folder-in-src","answer":"<p>Before bundling your app, Sapper builds a special package for your app, which you can access by importing from <code>@sapper/app</code>. Putting it inside <code>src/node_modules</code> means that it won&#39;t get nuked when you add new dependencies, and that you can easily import from it using the Node resolution algorithm.</p>\n","metadata":{"question":"Why is there a node_modules folder in the src folder of a Sapper project?"}}]